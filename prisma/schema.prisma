// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  SearchHistory SearchHistory[]
  listings      VehicleListing[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SearchHistory {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  vehicleType String
  brandName   String
  modelName   String
  year        String
  price       String

  createdAt DateTime @default(now())

  @@index([userId])
}


enum ListingStatus {
  ACTIVE
  SOLD
  REMOVED
}

model VehicleListing {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Usuário que fez o anúncio
  sellerId String
  seller   User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  // Detalhes do veículo
  modelName   String
  brandName   String
  year        String
  fuelType    String
  fipeCode    String

  // Detalhes de valor
  price         Int      // Salvar o preço em centavos é uma boa prática, mas para ficar simples, vou usar Int.
  mileage       String
  condition     String   // Ex. 'Excelente', 'Bom', 'Regular', 'Precisa de ajustes'
  optionals     Json     // Salva o opcionais selecionados como um objeto JSON

  // Listing Status
  status    ListingStatus @default(ACTIVE)

  @@index([sellerId])
  @@index([status])
}
